+ SINGLE=0
+ ARNOLD_WORKER_NUM=1
+ ARNOLD_ID=0
+ BATCH_SIZE=32
++ nvidia-smi --query-gpu=index --format=csv,noheader
++ wc -l
+ NUM_GPUS=2
+ exp_name=version3_trangnvt2_bs32_gpu2
+ nproc_per_node=
+ '[' '!' -z 0 ']'
+ '[' 0 '!=' 0 ']'
+ MASTER_NODE_ID=0
+ nnodes=1
+ node_rank=0
+ master_addr=METIS_WORKER_0_HOST
+ master_addr=
+ master_port=METIS_WORKER_0_PORT
+ master_port=
+ ports=(`echo $master_port | tr ',' ' '`)
++ echo
++ tr , ' '
+ master_port=
+ master_addr=127.0.0.1
+ master_port=12347
+ nproc_per_node=2
+ echo '[nproc_per_node: 2]'
+ echo '[nnodes: 1]'
+ echo '[node_rank: 0]'
+ echo '[master_addr: 127.0.0.1]'
+ echo '[master_port: 12347]'
+ export OMP_NUM_THREADS=8
+ OMP_NUM_THREADS=8
+ export NCCL_IB_DISABLE=0
+ NCCL_IB_DISABLE=0
+ export NCCL_IB_GID_INDEX=3
+ NCCL_IB_GID_INDEX=3
+ BED=checkpoints
+ LOCAL_OUT=local_output
+ mkdir -p checkpoints
+ mkdir -p local_output
+ export COMPILE_GAN=0
+ COMPILE_GAN=0
+ export USE_TIMELINE_SDK=1
+ USE_TIMELINE_SDK=1
+ export CUDA_TIMER_STREAM_KAFKA_CLUSTER=bmq_data_va
+ CUDA_TIMER_STREAM_KAFKA_CLUSTER=bmq_data_va
+ export CUDA_TIMER_STREAM_KAFKA_TOPIC=megatron_cuda_timer_tracing_original_v2
+ CUDA_TIMER_STREAM_KAFKA_TOPIC=megatron_cuda_timer_tracing_original_v2
+ export PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True
+ PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True
+ wandb offline
+ bed_path=checkpoints/version3_trangnvt2_bs32_gpu2/
+ data_path=../RepControlNet/data/canny_laion/infinity_10k/splits
+ video_data_path=
+ local_out_path=local_output/version3_trangnvt2_bs32_gpu2
+ torchrun --nproc_per_node=2 --nnodes=1 --node_rank=0 --master_addr=127.0.0.1 --master_port=12347 train.py --ep=100 --opt=adamw --cum=3 --sche=lin0 --fp16=2 --ada=0.9_0.97 --tini=-1 --tclip=5 --flash=0 --alng=5e-06 --saln=1 --cos=1 --enable_checkpointing=full-block --local_out_path local_output/version3_trangnvt2_bs32_gpu2 --task_type=t2i --bed=checkpoints/version3_trangnvt2_bs32_gpu2/ --data_path=../RepControlNet/data/canny_laion/infinity_10k/splits --video_data_path= --exp_name=version3_trangnvt2_bs32_gpu2 --tblr=6e-5 --pn 0.06M --model=2bc8 --lbs 32 --workers=8 --short_cap_prob 0.5 --online_t5=1 --use_streaming_dataset 1 --iterable_data_buffersize 30000 --Ct5=2048 --t5_path=google/flan-t5-xl --vae_type 32 --vae_ckpt=weights/infinity_vae_d32_rdn_short.pth --wp 0.00000001 --wpe=1 --dynamic_resolution_across_gpus 1 --enable_dynamic_length_prompt 1 --reweight_loss_by_scale 1 --add_lvl_embeding_only_first_block 1 --rope2d_each_sa_layer 1 --rope2d_normalized_by_hw 2 --use_fsdp_model_ema 0 --always_training_scales 100 --use_bit_label 1 --zero=2 --save_model_iters_freq 100 --log_freq=50 --checkpoint_type=torch --prefetch_factor=16 --noise_apply_strength 0.3 --noise_apply_layers 13 --apply_spatial_patchify 0 --use_flex_attn=True --pad=128 --use_image_adapter=1 --condition_folder=../RepControlNet/data/canny_laion/infinity_10k/condition_canny --image_folder=../RepControlNet/data/canny_laion/infinity_10k/images --pretrained_path weights/infinity_2b_reg.pth --tlr 9e-5
[W315 04:10:03.170526370 CUDAAllocatorConfig.h:28] Warning: expandable_segments not supported on this platform (function operator())
[W315 04:10:03.655197039 CUDAAllocatorConfig.h:28] Warning: expandable_segments not supported on this platform (function operator())
[rank1]:[W315 04:10:03.666875025 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
[rank0]:[W315 04:10:03.666878422 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
/lustre/scratch/client/movian/research/users/ngannh9/Infinity/env/flashattn/lib/python3.11/site-packages/torch/nn/init.py:51: UserWarning: Specified kernel cache directory is not writable! This disables kernel caching. Specified directory is /lustre/scratch/client/movian/research/users/ngannh9/.cache/torch/kernels. This warning will appear only once per process. (Triggered internally at ../aten/src/ATen/native/cuda/jit_utils.cpp:1460.)
  tensor.erfinv_()
/lustre/scratch/client/movian/research/users/ngannh9/Infinity/train.py:176: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(args.pretrained_path, map_location='cpu')
/lustre/scratch/client/movian/research/users/ngannh9/Infinity/env/flashattn/lib/python3.11/site-packages/torch/nn/init.py:51: UserWarning: Specified kernel cache directory is not writable! This disables kernel caching. Specified directory is /lustre/scratch/client/movian/research/users/ngannh9/.cache/torch/kernels. This warning will appear only once per process. (Triggered internally at ../aten/src/ATen/native/cuda/jit_utils.cpp:1460.)
  tensor.erfinv_()
/lustre/scratch/client/movian/research/users/ngannh9/Infinity/train.py:176: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(args.pretrained_path, map_location='cpu')
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 1/2 [00:31<00:31, 31.88s/it]Loading checkpoint shards:  50%|#####     | 1/2 [00:31<00:31, 31.98s/it]Loading checkpoint shards: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2/2 [00:32<00:00, 13.24s/it]Loading checkpoint shards: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2/2 [00:32<00:00, 16.04s/it]
Loading checkpoint shards: 100%|##########| 2/2 [00:32<00:00, 13.27s/it]Loading checkpoint shards: 100%|##########| 2/2 [00:32<00:00, 16.08s/it]
/lustre/scratch/client/movian/research/users/ngannh9/.cache/matplotlib is not a writable directory
Matplotlib created a temporary cache directory at /tmp/matplotlib-uog6wyi6 because there was an issue with the default path (/lustre/scratch/client/movian/research/users/ngannh9/.cache/matplotlib); it is highly recommended to set the MPLCONFIGDIR environment variable to a writable directory, in particular to speed up the import of Matplotlib and to better support multiprocessing.
/lustre/scratch/client/movian/research/users/ngannh9/.cache/matplotlib is not a writable directory
Matplotlib created a temporary cache directory at /tmp/matplotlib-ntolfkux because there was an issue with the default path (/lustre/scratch/client/movian/research/users/ngannh9/.cache/matplotlib); it is highly recommended to set the MPLCONFIGDIR environment variable to a writable directory, in particular to speed up the import of Matplotlib and to better support multiprocessing.
[34m[1mwandb[0m: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
2025/03/15 04:11:06 ERROR failed to get logger path error="error opening log file: open /lustre/scratch/client/movian/research/users/ngannh9/.cache/wandb/logs/core-debug-20250315_041106.log: permission denied"
2025/03/15 04:11:06 INFO Will exit if parent process dies. ppid=2762141
2025/03/15 04:11:06 INFO server is running addr=127.0.0.1:21759
2025/03/15 04:11:06 INFO connection: ManageConnectionData: new connection created id=127.0.0.1:23910
2025/03/15 04:11:06 INFO handleInformInit: received streamId=xu7oz2zo id=127.0.0.1:23910
2025/03/15 04:11:07 INFO handleInformInit: stream started streamId=xu7oz2zo id=127.0.0.1:23910
[34m[1mwandb[0m: Tracking run with wandb version 0.19.8
[34m[1mwandb[0m: W&B syncing is set to [1m`offline`[0m in this directory.  
[34m[1mwandb[0m: Run [1m`wandb online`[0m or set [1mWANDB_MODE=online[0m to enable cloud syncing.
/lustre/scratch/client/movian/research/users/ngannh9/Infinity/infinity/models/basic.py:503: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast(enabled=False):    # disable half precision
/lustre/scratch/client/movian/research/users/ngannh9/Infinity/infinity/models/basic.py:503: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast(enabled=False):    # disable half precision
/lustre/scratch/client/movian/research/users/ngannh9/Infinity/infinity/models/basic.py:503: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast(enabled=False):    # disable half precision
/lustre/scratch/client/movian/research/users/ngannh9/Infinity/infinity/models/basic.py:503: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast(enabled=False):    # disable half precision
/lustre/scratch/client/movian/research/users/ngannh9/Infinity/infinity/models/basic.py:503: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast(enabled=False):    # disable half precision
/lustre/scratch/client/movian/research/users/ngannh9/Infinity/infinity/models/basic.py:503: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast(enabled=False):    # disable half precision
slurmstepd: error: *** JOB 146509 ON sdc2-hpc-dgx-a100-013 CANCELLED AT 2025-03-15T04:17:37 ***
